#!/bin/bash

# Changing language versions

VERSION="0.1"
SUPPORTED_LANGUAGES=(elixir go php ruby python node)
GO_URL="https://storage.googleapis.com/golang"
# Misc
DATE_FORMAT='%H:%M %d/%m/%Y'

################################################################################
# Generic function which executes the passed 'command' to switch the version
# Globals:
#   language, language_version
# Arguments:
#   command
# Returns:
#  0, 1-127 (exit status of the language manager command)
install::install() {
  command=$1
  version::log "Changing '${language}' to version ${language_version}"
  echo "Im here"
  #eval $command $language_version
  ch_status=$?

  return $ch_status
}

install::install_ruby() {
  rbenv install  ${language_version}
  
  return $?
}

install::install_node() {
  #version::change "nvm use"
  nvm install ${language_version}
  npm install -g grunt-cli bower
  nvm alias default  ${language_version}

  return $?
}

install::install_elixir() {
  #version::change "kiex use"
  kiex install ${language_version}
  #kiex alias ${language_version} 
  echo 'source ~/.kerl/installs/21/activate' >> ~/.kiex/elixirs/elixir-${language_version}.env # ????? erlang version
  kiex default ${language_version}
  kiex use ${language_version}
  mix local.hex --force
  
  return $?
}

install::install_go() {
 wget $GO_URL/go${language_version}.linux-amd64.tar.gz -P /tmp
 sudo mkdir -p /usr/local/golang/${language_version}
 sudo tar -C /usr/local/golang/${language_version} -xzf /tmp/go${language_version}.linux-amd64.tar.gz
 switch_go /usr/local/golang/{$language_version}/go

  return $?
}


install::install_php() {
  phpbrew install ${language_version} +default +dbs +openssl -- --with-curl=/usr/local
  sem-version php {$language_version}
  return $?
}

install::install_python() {
  #version::change "change-python-version"
  echo "install python ${language_version}"

  return $?
}
################################################################################
# End of language manager wrappers
################################################################################


################################################################################
# Prints the usage
# Globals:
#   none
# Arguments:
#   none
# Returns:
#   none
install::usage() {
  echo -e "
################################################################################
sem-install ${VERSION} | Utility to change a selected languages active version

Usage:
  sem-install language version
################################################################################"
}

################################################################################
# Helper to print date in the given format
# Globals:
#   DATE_FORMAT
# Arguments:
#   message
# Returns:
#   none
################################################################################
install::date() {
  date +"${DATE_FORMAT}"
}

################################################################################
# Helper to display info messages
# Globals:
#   none
# Arguments:
#   message
# Returns:
#   none
################################################################################
install::log() {
  echo -e "\n[$(version::date)]: $@" >&2
}

################################################################################
# Helper function to show error messages and to terminate execution on error
# Globals:
#   DATE_FORMAT
# Arguments:
#   message
# Returns:
#   1
################################################################################
install::err() {
  echo -e "\n! [$(version::date)]: $@" >&2

  return 1
}

################################################################################
# The main entrypoint to the script. Holds the switching logic.
# Globals:
#   SUPPORTED_LANGUAGES
# Arguments:
#   'language', 'version'
# Returns:
#   none
################################################################################
install::main() {
  if ! [[ $# -eq 2 ]]; then
    install::usage
    install::err "Unsupported number of arguments provided!"

    return $?
  fi

  language=$1
  language_version=$2

  for (( i=0; i < ${#SUPPORTED_LANGUAGES}; i++ )); do
    if [[ ${SUPPORTED_LANGUAGES[i]} -eq $laguage ]]; then
      fn_name="install::install_${language}"

      if ! [[ $(type -t $fn_name) == function ]]; then
        version::err "Function '${fn_name}' not implemented. Language '${language}' might not be supported."

        return $?
      fi

      install::install_${language} $language_version
      fn_status=$?

      if [[ fn_status -ne 0 ]]; then
        install::err "Failed to switch version.\nLog:\n$log"

        return $?
      fi

      install::log "Install and switch successful."

      break
    fi
  done
}

sem-install() {
  install::main "$@"
}

